nxwatchdog(1)			 USER COMMANDS			 nxwatchdog(1)



NAME
       nxwatchdog  - monitors a daemon process and restarts it in the case the
       process dies.

SYNOPSIS
       To run nxwatchdog in monitor mode :

       nxwatchdog config_dir

       To run nxwatchdog in command mode :

       nxwatchdog config_dir command

       Where,

       config_dir is the configuration directory.

       command is one of the followings:stop, start,  abort,  status,  statis-
       tics.

DESCRIPTION
       nxwatchdog  is  a monitor process (a.k.a watchdog). Its main task is to
       monitor a process (generally a daemon), and restart  it	in  case  that
       process dies.  Apart from this, nxwatchdog also provides a way to manu-
       ally stop, start and query the current status of the process been moni-
       tored. Optionally, actions can be defined, so each time a state transi-
       tion occurs in the process been monitored, that action is executed.

       To accomplish this, nxwatchdog can be run in two different modes: moni-
       tor  mode and command mode.  In monitor mode, nxwatchdog is intended to
       run as a daemon. This means, it will terminate only under abnormal con-
       ditions	or if it receives an uncaught signal. In command mode, it will
       run as a normal command and finish after it completes execution of  the
       specified commamd.

       Briefly, in monitor mode nxwatchdog executes the following steps.

	   *  Check  if	 another instance of nxwatchdog is running. If that is
	      the case then terminate.

	   *  Read the command line stored inside the file process.cmd located
	      in the config_dir directory.

	   *  Execute the previous command line, and start to monitor this new
	      process.

       In command mode, nxwatchdog does the following.

	   *  Check that one instance of  nxwatchdog  is  running  in  monitor
	      mode.

	   *  If  command is start, stop or abort; then trigger the command to
	      be executed by the monitor instance.

	   *  If command is status or statistics then the related  information
	      shown by this command is printed in stdout.

   Running nxwatchdog in monitor mode
       To  start  monitoring  a	 process, you should run nxwatchdog in monitor
       mode.  In this mode, nxwatchdog only receives one parameter:  A	direc-
       tory  name in which to look for configuration files.  There is only one
       configuration file: process.cmd.	 This file indicates which process  to
       start  and monitor. During its execution, nxwatchdog also creates other
       files inside this directory (to track  his  internal  status).	For  a
       detailed	 description of all the files inside this directory (including
       process.cmd) see FILES below.

   Running nxwatchdog in command mode
       In command mode, nxwatchdog provides a way to  execute  different  com-
       mands  (e.g.  to	 query	or  change  the process current state).	 For a
       detailed description of all commands, see COMMANDS below.

FILES
   Configuration files
       process.cmd
	      This is a one line file. The only line is the command line  that
	      nxwatchdog will execute and monitor (see EXAMPLES below).

   Process state
       nxwatchdog.pid
	      Stores the PID for the monitored process.

       process.ts
	      Stores the timestamp at which the process been monitored started
	      to run.

   Statistics
       abort.count
	      Stores the number of how many times the process has been aborted
	      (due to the execution of abort command).

       auto_start.count
	      Stores  the  number of how many times the process has been auto-
	      matically started.

       manual_start.count
	      Stores the number of how many times the process has  been	 manu-
	      ally started (due to the execution of start command).

       stop.count
	      Stores the number of how many times the process has been stopped
	      (due to the execution of stop command).

       nxwatchdog.ts
	      Stores the timestamp at which nxwatchdog started to run.

   Logging information
       nxwatchdog.log
	      nxwatchdog log file.

       nxwatchdog.out
	      All stdout and stderr (besides the log messages) are  redirected
	      to this file (e.g.  stderr generated by external commands called
	      from nxwatchdog ).

   Commands indicators.
       stop.cmd
	      The existence of this file, means that the stop command has been
	      triggered.

       abort.cmd
	      The  existence  of  this	file, means that the abort command has
	      been triggered.

COMMANDS
       The following is the list of available commands to execute  in  command
       mode.   To  execute  any	 of these commands, one instance of nxwatchdog
       should be running in monitor mode.

       start  Tells the nxwatchdog monitor instance, to start the process.

       stop   Tells the nxwatchdog monitor instance, to stop the process (i.e.
	      to send a SIGTERM signal to the process).

       abort  Tells the nxwatchdog monitor instance to abort the process (i.e.
	      to send a SIGABRT signal to the process). On receiving the SIGA-
	      BRT signal, the process will generate a core dump file. The max-
	      imun size for the core file will be set to the  minimun  between
	      1000000 and the hard limit.

       status This  command  is executed directly by the nxwatchdog running in
	      command mode.  This command will return the current process sta-
	      tus:  RUNNING  or	 STOPPED.   In	case the process is in RUNNING
	      state, three more values are returned: The timestamp  since  the
	      process was started, its process id and the command line used to
	      start the process.

       statistics
	      This command is executed directly by the nxwatchdog  running  in
	      command  mode.   This  command will return the following statis-
	      tics: number of times the process	 has  been  stopped,  started,
	      aborted.

ACTIONS AND INTERNAL PROCESS STATES
       nxwatchdog  optionally  provides a way to define actions to be executed
       each time a state transition occurs  in	the  process  been  monitored.
       nxwatchdog tracks five different process states:

       RUNNING
	      The process is running.

       STARTING
	      nxwatchdog is starting the process to be monitored.

       ABORTING
	      nxwatchdog  has  issued the SIGABRT signal to the process and is
	      waiting for the process to completelly stop to run.

       STOPPING
	      nxwatchdog has issued the SIGTERM signal to the process  and  is
	      waiting for the process to completelly stop to run.

       STOPPED
	      The program is not running.

       Each time a state transition occurs from state A to state B, the action
       defined for state B is executed. To define an action  for  one  of  the
       states  defined above, an action file should be created in the configu-
       ration directory. This file must have executing permissions.  The  name
       of this files will be:

       action.running  -  Executed  when  the  transition  ends in the RUNNING
       state.

       action.starting - Executed when the transition  ends  in	 the  STARTING
       state.

       action.aborting	-  Executed  when  the transition ends in the ABORTING
       state.

       action.stopping - Executed when the transition  ends  in	 the  STOPPING
       state.

       action.stopped  -  Executed  when  the  transition  ends in the STOPPED
       state.




EXAMPLES
   Configuring nxwatchdog
       The following example shows, in a step by step sequence, how to config-
       ure  nxwatchdog	to  monitor  the  execution  of	 an application called
       my_daemon. Also, it illustrates how to query and execute	 a  couple  of
       commands.

       1.  Create  config  directory:  Create  a  new  directory  to be use by
       nxwatchdog.

       mkdir /home/nxwdconf

       2. Create process.cmd file: Inside the directory from step 1, create  a
       file called process.cmd whith the following line:

       /usr/local/bin/my_daemon -d 70000

       3. Start nxwatchdog in monitor mode: We use the nohup command to detach
       nxwatchdog from the console. We also add an & at	 the  end  to  run  in
       background.

       nohup nxwatchdog /home/nxwdconf &

       After this, nxwatchdog starts the process specified in step 2.

       4. Query process status: To query the current status of my_daemon, exe-
       cute the status command.

       nxwatchdog /home/nxwdconf status

       5. Stop my_daemon: To stop the execution of my_daemon process,  execute
       the stop command.

       nxwatchdog /home/nxwdconf stop

       6.  Verify  current  process  status: To verify that the process really
       stops, execute the status command again.

       nxwatchdog /home/nxwdconf status

       7. Start my_daemon: To start my_daemon process again, execute the start
       command.

       nxwatchdog /home/nxwdconf start

       8.  Show	 statistics:  To show statistics related to the process execu-
       tion, execute the statistics command.

       nxwatchdog /home/nxwdconf statistics

   Using nxwatchdog with cron
       To add more reliability, its possible to combine the use of  nxwatchdog
       and cron to be protected in the case that nxwatchdog stop to run.

       If we add the following line in the crontab file

       * * * * * /login/sg206816/nxwatchdog /home/nxwdconf

       cron  will  start  nxwatchdog  in  monitor  mode	 once every minute. If
       nxwatchdog is running at the moment cron start it, it  will  stop.   In
       other case, it will be restarted by cron.

EXIT STATUS
       nxwatchdog  returns  a zero exit status if it executes successfuly. Non
       zero is returned in case of failure.

AUTHOR
       Written by Sergio Nardi Spinelli <sergio.nardi (at) gmail.com>.

REPORTING BUGS
       Report bugs to <sergio.nardi (at) gmail.com>.

SEE ALSO
       nohup(1), cron(8), crontab(1)



version 0.3.0			April 25, 2014			 nxwatchdog(1)
